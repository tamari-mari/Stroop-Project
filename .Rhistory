#Factor check
contrasts(df$task)<-c(1,0)
contrasts(df$task)
contrasts(df$congruency)<-c(1,0)
contrasts(df$congruency)
#Save file
save(df, file = "./data/raw_data.rdata")
#Save file
save(df)
#Save file
save(df, file = ".//raw_data.rdata")
#Variable check
df <- df %>%
select(
subject,
task,
congruency,
block,
trial,
accuracy,
participant_response
) %>%
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
acc        = as.numeric(acc),
rt         = as.numeric(rt)
)
#Variable check
df <- df %>%
select(
subject,
task,
congruency,
block,
trial,
accuracy,
participant_response
) %>%
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
acc        = as.numeric(acc),
rt         = as.numeric(rt)
)
select(subject, block, trial, task, congruency, participant_response, correct_response, acc, rt)
#Variable check
df <- df %>%
select(
subject,
task,
congruency,
block,
trial,
accuracy,
participant_response
) %>%
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
acc        = as.numeric(acc),
rt         = as.numeric(rt)
)
#Variable check
df <- df %>%
select(
subject,
task,
congruency,
block,
trial,
accuracy,
participant_response
)
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
acc        = as.numeric(acc),
rt         = as.numeric(rt)
)
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
accuracy   = as.numeric(acc),
participant_response = as.numeric(rt)
)
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
accuracy   = as.numeric(accuracy),
participant_response = as.numeric(participant_response)
)
#Variable check
df <- df %>%
select(
subject,
task,
congruency,
block,
trial,
accuracy,
rt
)
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
accuracy   = as.numeric(accuracy),
rt         = as.numeric(rt)
)
select(subject, block, trial, task, congruency, participant_response, correct_response, acc, rt)
#Variable check
df <- df %>%
select(
subject,
task,
congruency,
block,
trial,
accuracy,
)
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
accuracy   = as.numeric(accuracy),
)
select(subject, block, trial, task, congruency, participant_response, correct_response, acc, rt)
#Variable check
df <- df %>%
select(
subject,
task,
congruency,
block,
trial,
accuracy,
)
select(subject, block, trial, task, congruency, participant_response, correct_response, accuracy, rt)
str(df)
#Variable check
df <- df %>%
select(
subject,
task,
congruency,
block,
trial,
accuracy,
rt
)
head(df)
summary(df)
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
accuracy   = as.numeric(accuracy),
rt         = as.numeric(rt)
)
#File upload
folder_path <- "C:\\Users\\tamar\\Documents\\University\\Psychology 2\\R\\stroop_data"
file_list <- dir(folder_path, pattern = "\\.csv$", full.names = TRUE)
df <- data.frame()
for (file in file_list) {
temp_data <- read.csv(file, stringsAsFactors = FALSE)
df <- rbind(df, temp_data)
}
head(df)
#Variable check
df <- df %>%
select(
subject,
task,
congruency,
block,
trial,
accuracy,
rt
)
#Task & congruence
df <- df %>%
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "congruent", "incongruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
)
#Accuracy
df <- df %>%
mutate(
accuracy = ifelse(participant_response == correct_response, 1, 0)
)
#Variable check
df <- df %>%
select(
subject,
task,
congruency,
block,
trial,
accuracy,
rt
)
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
accuracy   = as.numeric(accuracy),
rt         = as.numeric(rt)
)
select(subject, block, trial, task, congruency, participant_response, correct_response, accuracy, rt)
summary(df)
select(block, trial, task, congruency, participant_response, correct_response, accuracy, rt)
# R course for beginners
# Week 7
# assignment by Tamari Geron, id 314833195
### SCRIPT 1 - RAW DATA ###
### CREATE DATAFRAME ###
#File upload
folder_path <- "C:\\Users\\tamar\\Documents\\University\\Psychology 2\\R\\stroop_data"
file_list <- dir(folder_path, pattern = "\\.csv$", full.names = TRUE)
df <- data.frame()
for (file in file_list) {
temp_data <- read.csv(file, stringsAsFactors = FALSE)
df <- rbind(df, temp_data)
}
head(df)
#Task & congruence
df <- df %>%
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "congruent", "incongruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
)
#Accuracy
df <- df %>%
mutate(
accuracy = ifelse(participant_response == correct_response, 1, 0)
)
#Variable check
df <- df %>%
select(
subject,
task,
congruency,
block,
trial,
accuracy,
rt
)
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
accuracy   = as.numeric(accuracy),
rt         = as.numeric(rt)
)
summary(df)
#Factor check
contrasts(df$task)<-c(1,0)
contrasts(df$task)
contrasts(df$congruency)<-c(1,0)
contrasts(df$congruency)
#Save file
save(df, file = ".//raw_data.rdata")
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
accuracy   = as.numeric(accuracy),
rt         = as.numeric(rt)
)
#Save file
save(df, file = ".//raw_data.rdata")
#Loading data file
load(".//raw_data.rdata")
#Cleaning the workspace
rm(list = ls())
#Loading data file
load(".//raw_data.rdata")
#Subjects
cat("Number of unique subjects:", length(unique(df$subject)))
#Removing NA
df <- df %>%
filter(!is.na(rt) & !is.na(accuracy))
#Removing NA
df <- df %>%
filter(!is.na(rt))
#Removing outliers
df <- df %>%
filter(rt >= 300 & rt <= 3000)
#Remaining trials percentage
df %>%
group_by(subject) %>%
summarise(percentage = 1 - (n() / 400)) %>%
print(n = Inf)
#Trial mean and sd
total_steps_before <- nrow(original_df)
#Trial mean and sd
total_steps_before <- nrow(df)
df_before <- data.frame(df)
#Save file
save(df, file = ".//filtered_data.rdata")
total_steps_after <- nrow(df)
percent_removed <- ((total_steps_before - total_steps_after) / total_steps_before) * 100
df_before <- data.frame(df)
#Trial mean and sd
total_steps_before <- nrow(df_before)
total_steps_after <- nrow(df)
percent_removed <- ((total_steps_before - total_steps_after) / total_steps_before) * 100
summary_stats <- df_before %>%
group_by(subject) %>%
summarise(
steps_before = n(),
steps_after = sum(!is.na(rt) & rt >= 300 & rt <= 3000),
percent_removed = ((steps_before - steps_after) / steps_before) * 100
) %>%
summarise(
mean_percent_removed = mean(percent_removed, na.rm = TRUE),
sd_percent_removed = sd(percent_removed, na.rm = TRUE)
)
summary_stats
### SCRIPT 2 - FILTERED DATA ###
#Cleaning the workspace
rm(list = ls())
#Loading data file
load(".//raw_data.rdata")
#Subjects
cat("Number of unique subjects:", length(unique(df$subject)))
df_before <- data.frame(df)
#Removing NA
df <- df %>%
filter(!is.na(rt))
#Removing outliers
df <- df %>%
filter(rt >= 300 & rt <= 3000)
#Remaining trials percentage
df %>%
group_by(subject) %>%
summarise(percentage = 1 - (n() / 400)) %>%
print(n = Inf)
#Trial mean and sd
total_steps_before <- nrow(df_before)
total_steps_after <- nrow(df)
percent_removed <- ((total_steps_before - total_steps_after) / total_steps_before) * 100
summary_stats <- df_before %>%
group_by(subject) %>%
summarise(
steps_before = n(),
steps_after = sum(!is.na(rt) & rt >= 300 & rt <= 3000),
percent_removed = ((steps_before - steps_after) / steps_before) * 100
) %>%
summarise(
mean_percent_removed = mean(percent_removed, na.rm = TRUE),
sd_percent_removed = sd(percent_removed, na.rm = TRUE)
)
summary_stats
#Save file
save(df, file = ".//filtered_data.rdata")
# R course for beginners
# Week 7
# assignment by Tamari Geron, id 314833195
### SCRIPT 1 - RAW DATA ###
### CREATE DATAFRAME ###
#File upload
folder_path <- "C:\\Users\\tamar\\Documents\\University\\Psychology 2\\R\\stroop_data"
file_list <- dir(folder_path, pattern = "\\.csv$", full.names = TRUE)
df <- data.frame()
for (file in file_list) {
temp_data <- read.csv(file, stringsAsFactors = FALSE)
df <- rbind(df, temp_data)
}
head(df)
#Task & congruence
df <- df %>%
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "congruent", "incongruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
)
#Accuracy
df <- df %>%
mutate(
accuracy = ifelse(participant_response == correct_response, 1, 0)
)
#Variable check
df <- df %>%
select(
subject,
task,
congruency,
block,
trial,
accuracy,
rt
)
df <- df %>%
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
accuracy   = as.numeric(accuracy),
rt         = as.numeric(rt)
)
summary(df)
#Factor check
contrasts(df$task)<-c(1,0)
contrasts(df$task)
contrasts(df$congruency)<-c(1,0)
contrasts(df$congruency)
#Save file
save(df, file = ".//raw_data.rdata")
### SCRIPT 2 - FILTERED DATA ###
#Cleaning the workspace
rm(list = ls())
#Loading data file
load(".//raw_data.rdata")
#Subjects
cat("Number of unique subjects:", length(unique(df$subject)))
#Data frame before removal
df_before <- data.frame(df)
#Removing NA
df <- df %>%
filter(!is.na(rt))
#Removing outliers
df <- df %>%
filter(rt >= 300 & rt <= 3000)
#Remaining trials percentage
df %>%
group_by(subject) %>%
summarise(percentage = 1 - (n() / 400)) %>%
print(n = Inf)
#Trial mean and sd
total_steps_before <- nrow(df_before)
total_steps_after <- nrow(df)
percent_removed <- ((total_steps_before - total_steps_after) / total_steps_before) * 100
summary_stats <- df_before %>%
group_by(subject) %>%
summarise(
steps_before = n(),
steps_after = sum(!is.na(rt) & rt >= 300 & rt <= 3000),
percent_removed = ((steps_before - steps_after) / steps_before) * 100
) %>%
summarise(
mean_percent_removed = mean(percent_removed, na.rm = TRUE),
sd_percent_removed = sd(percent_removed, na.rm = TRUE)
)
summary_stats
#Save file
save(df, file = ".//filtered_data.rdata")
library(tidyverse)
library(ggplot2)
library(ggdist)
library(effectsize)
library(ggpubr)
stroop_data <- data.frame(
condition = c("Congruent", "Incongruent"),
reaction_time = c(650, 800)
)
ggplot(stroop_data, aes(x = condition, y = reaction_time)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(
title = "Stroop Reaction Time",
x = "Condition",
y = "Average RT (ms)"
) +
theme_minimal()
ggsave("stroop_results.png", width = 6, height = 4)
